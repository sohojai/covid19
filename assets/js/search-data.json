{
  
    
        "post0": {
            "title": "Title",
            "content": "# https://github.com/k-sys/covid-19/blob/master/Realtime%20R0.ipynb . $R_t$ is the measure known as the effective reproduction number. It&#39;s the number of people who become infected per infectious person at time $t$. . This is Bayes&#39; Theorem as we&#39;ll use it: . $$ P(R_t|k)= frac{P(R_t) cdot mathcal{L}(R_t|k)}{P(k)} $$ This says that, having seen $k$ new cases, we believe the distribution of $R_t$ is equal to: . The prior beliefs of the value of $P(R_t)$ without the data ... | times the likelihood of $R_t$ given that we&#39;ve seen $k$ new cases ... | divided by the probability of seeing this many cases in general. | . $$ P(R_t|k) propto P(R_t) cdot mathcal{L}(R_t|k) $$ This is for a single day. . To make it iterative: every day that passes, we use yesterday&#39;s conclusion (ie. posterior) $P(R_{t-1}|k_{t-1})$ to be today&#39;s prior $P(R_t)$ so on day two: . $$ P(R_2|k) propto P(R_0) cdot mathcal{L}(R_2|k_2) cdot mathcal{L}(R_1|k_1) $$ And more generally: . $$ P(R_t|k_t) propto P(R_0) cdot { displaystyle prod^{T}_{t=0}} mathcal{L}(R_t|k_t) $$ With a uniform prior $P(R_0)$, this reduces to: . $$ P(R_t|k_t) propto { displaystyle prod^{T}_{t=0}} mathcal{L} left(R_t|k_t right) $$ . o this simple, but important change leads to the following: . $$ P(R_t|k_t) propto { displaystyle prod^{T}_{t=T-m}} mathcal{L} left(R_t|k_t right) $$ While this takes the last $m$ priors into account equally, you can decide to apply a windowing function (such as an exponential) to favor recent priors over more distant. . Given an average arrival rate of $ lambda$ new cases per day, the probability of seeing $k$ new cases is distributed according to the Poisson distribution: . $$P(k| lambda) = frac{ lambda^k e^{- lambda}}{k!}$$ . import pandas as pd import numpy as np from matplotlib import pyplot as plt from matplotlib.dates import date2num, num2date from matplotlib import dates as mdates from matplotlib import ticker from matplotlib.colors import ListedColormap from matplotlib.patches import Patch from scipy import stats as sps from scipy.interpolate import interp1d from IPython.display import clear_output FILTERED_REGIONS = [ &#39;Virgin Islands&#39;, &#39;American Samoa&#39;, &#39;Northern Mariana Islands&#39;, &#39;Guam&#39;, &#39;Puerto Rico&#39;] %config InlineBackend.figure_format = &#39;retina&#39; . # Calculate probability of seeing k (= [0: 70]) new cases using 4 poisson distribution # Each poisson distribution is fitted with a different lambda: observed arrival rate k = np.arange(0, 70)[:, None] # Different values of Lambda lambdas = [10, 20, 30, 40] # Evaluated the Probability Mass Function (remember: poisson is discrete) y = sps.poisson.pmf(k, lambdas) # Show the resulting shape print(y.shape) fig, ax = plt.subplots() ax.set(title=&#39;Poisson Distribution of Cases n $p(k| lambda)$&#39;) plt.plot(k, y, marker=&#39;o&#39;, markersize=3, lw=0) plt.legend(title=&quot;$ lambda$&quot;, labels=lambdas); . (70, 4) . # we want to see what value of lambda maximizes likelihood of observed value k(20 cases) # From the plot below, it looks like lambda close to 20 will maximizes the probability of # the observed value k = 20 lam = np.linspace(1, 45, 90) likelihood = pd.Series(data=sps.poisson.pmf(k, lam), index=pd.Index(lam, name=&#39;$ lambda$&#39;), name=&#39;lambda&#39;) likelihood.plot(title=r&#39;Likelihood $L left( lambda|k_t right)$&#39;); . Connecting $ lambda$ and $R_t$ The key insight to making this work is to realize there&#39;s a connection between $R_t$ and $ lambda$. The derivation is beyond the scope of this notebook, but here it is: . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ where $ gamma$ is the reciprocal of the serial interval (about 7 days for COVID19). Since we know every new case count on the previous day, we can now reformulate the likelihood function as a Poisson parameterized by fixing $k$ and varying $R_t$. . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$$$P left(k|R_t right) = frac{ lambda^k e^{- lambda}}{k!}$$ . # We have some cases for k for several days, we would like to know Rt for each of the day independendly k = np.array([20, 40, 55, 90]) # We create an array for every possible value of Rt R_T_MAX = 12 r_t_range = np.linspace(0, R_T_MAX, R_T_MAX*100+1) # Gamma is 1/serial interval # https://wwwnc.cdc.gov/eid/article/26/7/20-0282_article # https://www.nejm.org/doi/full/10.1056/NEJMoa2001316 GAMMA = 1/7 # Map Rt into lambda so we can substitute it into the equation below # Note that we have N-1 lambdas because on the first day of an outbreak # you do not know what to expect. lam = k[:-1] * np.exp(GAMMA * (r_t_range[:, None] - 1)) # Evaluate the likelihood on each day and normalize sum of each day to 1.0 likelihood_r_t = sps.poisson.pmf(k[1:], lam) likelihood_r_t /= np.sum(likelihood_r_t, axis=0) # Plot it ax = pd.DataFrame( data = likelihood_r_t, index = r_t_range ).plot( title=&#39;Likelihood of $R_t$ given $k$&#39;, xlim=(0,10) ) ax.legend(labels=k[1:], title=&#39;New Cases&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . # Rt for a given day should take all the previous days into account posteriors = likelihood_r_t.cumprod(axis=1) posteriors = posteriors / np.sum(posteriors, axis=0) columns = pd.Index(range(1, posteriors.shape[1]+1), name=&#39;Day&#39;) posteriors = pd.DataFrame( data = posteriors, index = r_t_range, columns = columns) ax = posteriors.plot( title=&#39;Posterior $P(R_t|k)$&#39;, xlim=(0,10) ) ax.legend(title=&#39;Day&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . #From these posteriors, we can answer important questions such as &quot;What is the most likely value of $R_t$ each day?&quot; most_likely_values = posteriors.idxmax(axis=0) most_likely_values . Day 1 5.85 2 4.22 3 4.33 dtype: float64 . def highest_density_interval(pmf, p=.9): # If we pass a DataFrame, just call this recursively on the columns if(isinstance(pmf, pd.DataFrame)): return pd.DataFrame([highest_density_interval(pmf[col], p=p) for col in pmf], index=pmf.columns) cumsum = np.cumsum(pmf.values) best = None for i, value in enumerate(cumsum): for j, high_value in enumerate(cumsum[i+1:]): if (high_value-value &gt; p) and (not best or j&lt;best[1]-best[0]): best = (i, i+j+1) break low = pmf.index[best[0]] high = pmf.index[best[1]] return pd.Series([low, high], index=[f&#39;Low_{p*100:.0f}&#39;, f&#39;High_{p*100:.0f}&#39;]) hdi = highest_density_interval(posteriors) hdi.tail() . Low_90 High_90 . Day . 1 3.99 | 7.65 | . 2 3.03 | 5.40 | . 3 3.49 | 5.19 | . # Finally, we can plot both the most likely values for $R_t$ and the HDIs over time. This is the most useful representation as it shows how our beliefs change with every day. ax = most_likely_values.plot(marker=&#39;o&#39;, label=&#39;Most Likely&#39;, title=f&#39;$R_t$ by day&#39;, c=&#39;k&#39;, markersize=4) ax.fill_between(hdi.index, hdi[&#39;Low_90&#39;], hdi[&#39;High_90&#39;], color=&#39;k&#39;, alpha=.1, lw=0, label=&#39;HDI&#39;) ax.legend(); . Real-World Application to US Data . #Setup #Load US state case data from the NYT archive url = &#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv&#39; states = pd.read_csv(url, usecols=[0,1,3], index_col=[&#39;state&#39;, &#39;date&#39;], parse_dates=[&#39;date&#39;], squeeze=True).sort_index() . states.head() . state date Alabama 2020-03-13 6 2020-03-14 12 2020-03-15 23 2020-03-16 29 2020-03-17 39 Name: cases, dtype: int64 . state_name = &#39;New York&#39; def prepare_cases(cases): new_cases = cases.diff() smoothed = new_cases.rolling(7, win_type=&#39;gaussian&#39;, min_periods=1, center=True).mean(std=2).round() zeros = smoothed.index[smoothed.eq(0)] if len(zeros) == 0: idx_start = 0 else: last_zero = zeros.max() idx_start = smoothed.index.get_loc(last_zero) + 1 smoothed = smoothed.iloc[idx_start:] original = new_cases.loc[smoothed.index] return original, smoothed cases = states.xs(state_name).rename(f&quot;{state_name} cases&quot;) original, smoothed = prepare_cases(cases) original.plot(title=f&quot;{state_name} New Cases per Day&quot;, c=&#39;k&#39;, linestyle=&#39;:&#39;, alpha=.5, label=&#39;Actual&#39;, legend=True, figsize=(500/72, 400/72)) ax = smoothed.plot(label=&#39;Smoothed&#39;, legend=True) ax.get_figure().set_facecolor(&#39;w&#39;) . world_dataset_url = &quot;https://github.com/datasets/covid-19/blob/master/data/countries-aggregated.csv&quot; wdf = pd.read_csv(world_dataset_url) wdf.head() . ParserError Traceback (most recent call last) &lt;ipython-input-18-5050a2aefa00&gt; in &lt;module&gt;() 1 world_dataset_url = &#34;https://github.com/datasets/covid-19/blob/master/data/countries-aggregated.csv&#34; -&gt; 2 wdf = pd.read_csv(world_dataset_url) 3 wdf.head() /usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision) 674 ) 675 --&gt; 676 return _read(filepath_or_buffer, kwds) 677 678 parser_f.__name__ = name /usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py in _read(filepath_or_buffer, kwds) 452 453 try: --&gt; 454 data = parser.read(nrows) 455 finally: 456 parser.close() /usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py in read(self, nrows) 1131 def read(self, nrows=None): 1132 nrows = _validate_integer(&#34;nrows&#34;, nrows) -&gt; 1133 ret = self._engine.read(nrows) 1134 1135 # May alter columns / col_dict /usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py in read(self, nrows) 2035 def read(self, nrows=None): 2036 try: -&gt; 2037 data = self._reader.read(nrows) 2038 except StopIteration: 2039 if self._first_chunk: pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows() pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error() ParserError: Error tokenizing data. C error: Expected 1 fields in line 49, saw 2 .",
            "url": "https://sohojai.github.io/covid19/2020/04/18/Covid19-Rt-Prediction.html",
            "relUrl": "/2020/04/18/Covid19-Rt-Prediction.html",
            "date": " • Apr 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "# https://github.com/k-sys/covid-19/blob/master/Realtime%20R0.ipynb . $R_t$ is the measure known as the effective reproduction number. It&#39;s the number of people who become infected per infectious person at time $t$. . This is Bayes&#39; Theorem as we&#39;ll use it: . $$ P(R_t|k)= frac{P(R_t) cdot mathcal{L}(R_t|k)}{P(k)} $$ This says that, having seen $k$ new cases, we believe the distribution of $R_t$ is equal to: . The prior beliefs of the value of $P(R_t)$ without the data ... | times the likelihood of $R_t$ given that we&#39;ve seen $k$ new cases ... | divided by the probability of seeing this many cases in general. | . $$ P(R_t|k) propto P(R_t) cdot mathcal{L}(R_t|k) $$ This is for a single day. . To make it iterative: every day that passes, we use yesterday&#39;s conclusion (ie. posterior) $P(R_{t-1}|k_{t-1})$ to be today&#39;s prior $P(R_t)$ so on day two: . $$ P(R_2|k) propto P(R_0) cdot mathcal{L}(R_2|k_2) cdot mathcal{L}(R_1|k_1) $$ And more generally: . $$ P(R_t|k_t) propto P(R_0) cdot { displaystyle prod^{T}_{t=0}} mathcal{L}(R_t|k_t) $$ With a uniform prior $P(R_0)$, this reduces to: . $$ P(R_t|k_t) propto { displaystyle prod^{T}_{t=0}} mathcal{L} left(R_t|k_t right) $$ . o this simple, but important change leads to the following: . $$ P(R_t|k_t) propto { displaystyle prod^{T}_{t=T-m}} mathcal{L} left(R_t|k_t right) $$ While this takes the last $m$ priors into account equally, you can decide to apply a windowing function (such as an exponential) to favor recent priors over more distant. . Given an average arrival rate of $ lambda$ new cases per day, the probability of seeing $k$ new cases is distributed according to the Poisson distribution: . $$P(k| lambda) = frac{ lambda^k e^{- lambda}}{k!}$$ . import pandas as pd import numpy as np from matplotlib import pyplot as plt from matplotlib.dates import date2num, num2date from matplotlib import dates as mdates from matplotlib import ticker from matplotlib.colors import ListedColormap from matplotlib.patches import Patch from scipy import stats as sps from scipy.interpolate import interp1d from IPython.display import clear_output FILTERED_REGIONS = [ &#39;Virgin Islands&#39;, &#39;American Samoa&#39;, &#39;Northern Mariana Islands&#39;, &#39;Guam&#39;, &#39;Puerto Rico&#39;] %config InlineBackend.figure_format = &#39;retina&#39; . # Calculate probability of seeing k (= [0: 70]) new cases using 4 poisson distribution # Each poisson distribution is fitted with a different lambda: observed arrival rate k = np.arange(0, 70)[:, None] # Different values of Lambda lambdas = [10, 20, 30, 40] # Evaluated the Probability Mass Function (remember: poisson is discrete) y = sps.poisson.pmf(k, lambdas) # Show the resulting shape print(y.shape) fig, ax = plt.subplots() ax.set(title=&#39;Poisson Distribution of Cases n $p(k| lambda)$&#39;) plt.plot(k, y, marker=&#39;o&#39;, markersize=3, lw=0) plt.legend(title=&quot;$ lambda$&quot;, labels=lambdas); . (70, 4) . # we want to see what value of lambda maximizes likelihood of observed value k(20 cases) # From the plot below, it looks like lambda close to 20 will maximizes the probability of # the observed value k = 20 lam = np.linspace(1, 45, 90) likelihood = pd.Series(data=sps.poisson.pmf(k, lam), index=pd.Index(lam, name=&#39;$ lambda$&#39;), name=&#39;lambda&#39;) likelihood.plot(title=r&#39;Likelihood $L left( lambda|k_t right)$&#39;); . Connecting $ lambda$ and $R_t$ The key insight to making this work is to realize there&#39;s a connection between $R_t$ and $ lambda$. The derivation is beyond the scope of this notebook, but here it is: . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ where $ gamma$ is the reciprocal of the serial interval (about 7 days for COVID19). Since we know every new case count on the previous day, we can now reformulate the likelihood function as a Poisson parameterized by fixing $k$ and varying $R_t$. . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$$$P left(k|R_t right) = frac{ lambda^k e^{- lambda}}{k!}$$ . # We have some cases for k for several days, we would like to know Rt for each of the day independendly k = np.array([20, 40, 55, 90]) # We create an array for every possible value of Rt R_T_MAX = 12 r_t_range = np.linspace(0, R_T_MAX, R_T_MAX*100+1) # Gamma is 1/serial interval # https://wwwnc.cdc.gov/eid/article/26/7/20-0282_article # https://www.nejm.org/doi/full/10.1056/NEJMoa2001316 GAMMA = 1/7 # Map Rt into lambda so we can substitute it into the equation below # Note that we have N-1 lambdas because on the first day of an outbreak # you do not know what to expect. lam = k[:-1] * np.exp(GAMMA * (r_t_range[:, None] - 1)) # Evaluate the likelihood on each day and normalize sum of each day to 1.0 likelihood_r_t = sps.poisson.pmf(k[1:], lam) likelihood_r_t /= np.sum(likelihood_r_t, axis=0) # Plot it ax = pd.DataFrame( data = likelihood_r_t, index = r_t_range ).plot( title=&#39;Likelihood of $R_t$ given $k$&#39;, xlim=(0,10) ) ax.legend(labels=k[1:], title=&#39;New Cases&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . # Rt for a given day should take all the previous days into account posteriors = likelihood_r_t.cumprod(axis=1) posteriors = posteriors / np.sum(posteriors, axis=0) columns = pd.Index(range(1, posteriors.shape[1]+1), name=&#39;Day&#39;) posteriors = pd.DataFrame( data = posteriors, index = r_t_range, columns = columns) ax = posteriors.plot( title=&#39;Posterior $P(R_t|k)$&#39;, xlim=(0,10) ) ax.legend(title=&#39;Day&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . #From these posteriors, we can answer important questions such as &quot;What is the most likely value of $R_t$ each day?&quot; most_likely_values = posteriors.idxmax(axis=0) most_likely_values . Day 1 5.85 2 4.22 3 4.33 dtype: float64 . def highest_density_interval(pmf, p=.9): # If we pass a DataFrame, just call this recursively on the columns if(isinstance(pmf, pd.DataFrame)): return pd.DataFrame([highest_density_interval(pmf[col], p=p) for col in pmf], index=pmf.columns) cumsum = np.cumsum(pmf.values) best = None for i, value in enumerate(cumsum): for j, high_value in enumerate(cumsum[i+1:]): if (high_value-value &gt; p) and (not best or j&lt;best[1]-best[0]): best = (i, i+j+1) break low = pmf.index[best[0]] high = pmf.index[best[1]] return pd.Series([low, high], index=[f&#39;Low_{p*100:.0f}&#39;, f&#39;High_{p*100:.0f}&#39;]) hdi = highest_density_interval(posteriors) hdi.tail() . Low_90 High_90 . Day . 1 3.99 | 7.65 | . 2 3.03 | 5.40 | . 3 3.49 | 5.19 | . # Finally, we can plot both the most likely values for $R_t$ and the HDIs over time. This is the most useful representation as it shows how our beliefs change with every day. ax = most_likely_values.plot(marker=&#39;o&#39;, label=&#39;Most Likely&#39;, title=f&#39;$R_t$ by day&#39;, c=&#39;k&#39;, markersize=4) ax.fill_between(hdi.index, hdi[&#39;Low_90&#39;], hdi[&#39;High_90&#39;], color=&#39;k&#39;, alpha=.1, lw=0, label=&#39;HDI&#39;) ax.legend(); . Real-World Application to US Data . #Setup #Load US state case data from the NYT archive url = &#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv&#39; states = pd.read_csv(url, usecols=[0,1,3], index_col=[&#39;state&#39;, &#39;date&#39;], parse_dates=[&#39;date&#39;], squeeze=True).sort_index() . states.head() . state date Alabama 2020-03-13 6 2020-03-14 12 2020-03-15 23 2020-03-16 29 2020-03-17 39 Name: cases, dtype: int64 . state_name = &#39;New York&#39; def prepare_cases(cases): new_cases = cases.diff() smoothed = new_cases.rolling(7, win_type=&#39;gaussian&#39;, min_periods=1, center=True).mean(std=2).round() zeros = smoothed.index[smoothed.eq(0)] if len(zeros) == 0: idx_start = 0 else: last_zero = zeros.max() idx_start = smoothed.index.get_loc(last_zero) + 1 smoothed = smoothed.iloc[idx_start:] original = new_cases.loc[smoothed.index] return original, smoothed cases = states.xs(state_name).rename(f&quot;{state_name} cases&quot;) original, smoothed = prepare_cases(cases) original.plot(title=f&quot;{state_name} New Cases per Day&quot;, c=&#39;k&#39;, linestyle=&#39;:&#39;, alpha=.5, label=&#39;Actual&#39;, legend=True, figsize=(500/72, 400/72)) ax = smoothed.plot(label=&#39;Smoothed&#39;, legend=True) ax.get_figure().set_facecolor(&#39;w&#39;) . world_dataset_url = &quot;https://github.com/datasets/covid-19/blob/master/data/countries-aggregated.csv&quot; wdf = pd.read_csv(world_dataset_url) wdf.head() . ParserError Traceback (most recent call last) &lt;ipython-input-18-5050a2aefa00&gt; in &lt;module&gt;() 1 world_dataset_url = &#34;https://github.com/datasets/covid-19/blob/master/data/countries-aggregated.csv&#34; -&gt; 2 wdf = pd.read_csv(world_dataset_url) 3 wdf.head() /usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision) 674 ) 675 --&gt; 676 return _read(filepath_or_buffer, kwds) 677 678 parser_f.__name__ = name /usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py in _read(filepath_or_buffer, kwds) 452 453 try: --&gt; 454 data = parser.read(nrows) 455 finally: 456 parser.close() /usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py in read(self, nrows) 1131 def read(self, nrows=None): 1132 nrows = _validate_integer(&#34;nrows&#34;, nrows) -&gt; 1133 ret = self._engine.read(nrows) 1134 1135 # May alter columns / col_dict /usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py in read(self, nrows) 2035 def read(self, nrows=None): 2036 try: -&gt; 2037 data = self._reader.read(nrows) 2038 except StopIteration: 2039 if self._first_chunk: pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows() pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error() ParserError: Error tokenizing data. C error: Expected 1 fields in line 49, saw 2 .",
            "url": "https://sohojai.github.io/covid19/2020/04/17/Covid_19_Rt_prediction.html",
            "relUrl": "/2020/04/17/Covid_19_Rt_prediction.html",
            "date": " • Apr 17, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sohojai.github.io/covid19/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sohojai.github.io/covid19/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sohojai.github.io/covid19/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sohojai.github.io/covid19/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}